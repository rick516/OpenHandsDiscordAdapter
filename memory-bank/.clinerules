# OpenHandsDiscordAdapter Project Rules

## Project Structure
- `src/bot/`: Discord bot implementation
- `src/adapter/`: OpenHands adapter implementation
- `src/utils/`: Utility functions
- `src/config.py`: Central configuration
- `src/__main__.py`: Entry point
- `tests/`: Test directory

## Docker Configuration

### Docker Naming Conventions
- Repository names must be lowercase
- May contain lowercase letters, digits, and separators (periods, dashes, underscores)
- Must start and end with an alphanumeric character

Valid: `openhands-discord-adapter:latest`, `openhands_discord_adapter:test`
Invalid: `OpenHandsDiscordAdapter:test`, `openhands-discord-adapter:`, `-openhands-discord-adapter:test`

### CI/CD Configuration
- Ensure all repository names are lowercase in GitHub Actions workflows
- Maintain consistency between local development and CI/CD environments
- Docker Compose configurations should match GitHub Actions workflow configurations

## Coding Patterns

### Type Annotations
```python
from typing import Dict, List, Optional, Any, Union

def process_data(data: Dict[str, Any], options: Optional[List[str]] = None) -> Dict[str, Any]:
    """Process data with optional configuration."""
    if options is None:
        options = []
    return processed_data
```

### Handling Optional Values
```python
# Environment variables
api_key = os.getenv("API_KEY", "")  # Default value for string environment variables

# Dictionary access
status_color = status_colors.get(str(status.get("status", "")), default_color)

# Function parameters
def process_task(task_id: Optional[str] = None) -> None:
    if task_id is None:
        return
```

### Discord Bot Commands
```python
@bot.command(name="command_name")
async def command_function(ctx: commands.Context, *args: Any) -> None:
    """Command docstring with description and args."""
    thinking_msg = await ctx.send("⏳ Processing...")
    
    try:
        result = await openhands_adapter.some_function(*args)
        await thinking_msg.edit(content="✅ Success message")
    except Exception as e:
        logger.error(f"Error in command: {e}")
        await thinking_msg.edit(content=f"❌ Error: {str(e)}")
```

### Error Handling
```python
try:
    result = await openhands_adapter.some_function(*args)
except Exception as e:
    logger.error(f"Error: {e}")
    # Handle the error appropriately
```

### Response Formatting
```python
from src.utils.formatter import format_result, format_status, format_tasks_list

# Format a task result
embed = format_result(result)

# Format a task status
embed = format_status(status)

# Format a list of tasks
embed = format_tasks_list(tasks)
```

## Testing Patterns

### Unit Test Example
```python
import pytest
from unittest.mock import Mock, patch
from src.utils.formatter import format_result

def test_format_result() -> None:
    # Arrange
    mock_result = {"output": "test output", "status": "completed"}
    
    # Act
    embed = format_result(mock_result)
    
    # Assert
    assert embed.title == "Task Result"
    assert "test output" in embed.description
    assert embed.color.value == 0x00FF00  # Green color
```

### Async Test Example
```python
import pytest
import pytest_asyncio
from unittest.mock import AsyncMock, patch
from src.adapter.openhands_adapter import OpenHandsAdapter

@pytest.mark.asyncio
async def test_adapter_execute_task() -> None:
    # Arrange
    adapter = OpenHandsAdapter()
    mock_process = AsyncMock()
    mock_process.communicate.return_value = (b"task output", b"")
    mock_process.returncode = 0
    
    # Act
    with patch('asyncio.create_subprocess_exec', return_value=mock_process):
        result = await adapter.execute_task("test task")
    
    # Assert
    assert result["status"] == "completed"
    assert result["output"] == "task output"
```

## PR Title Format
- Follow conventional commit format: `type(scope): description`
- Valid types: feat, fix, docs, style, refactor, perf, test, build, ci, chore, revert
- Description must be present and start with lowercase letter
- Examples:
  - `feat(auth): add login functionality`
  - `fix(api): resolve null pointer exception in status endpoint`
  - `docs(readme): update installation instructions`

## Environment Setup
The project requires the following environment variables:
- `DISCORD_TOKEN`: Discord bot token
- `DISCORD_CLIENT_ID`: Discord client ID
- `COMMAND_PREFIX`: Prefix for bot commands (default: `!oh `)
- `OPENHANDS_CLI_PATH`: Path to the OpenHands CLI
- `OPENHANDS_WORKDIR`: Directory for OpenHands workspaces
- `LLM_API_KEY`: API key for the language model
- `LLM_MODEL`: Model identifier
- `SANDBOX_RUNTIME_CONTAINER_IMAGE`: Docker image for the sandbox runtime
- `OPENHANDS_CHAT_CHANNEL`: Name of the Discord channel for OpenHands chat
- `MAX_CONCURRENT_TASKS`: Maximum number of concurrent tasks
- `TASK_TIMEOUT_SECONDS`: Timeout for tasks in seconds
- `LOG_LEVEL`: Logging level (default: `INFO`)
- `RETRY_COUNT`: Number of retries for failed operations (default: 3)
- `RETRY_DELAY`: Delay between retries in seconds (default: 2)

## Known Workarounds

### Discord Message Size Limits
Discord has a 2000 character limit for messages and 6000 character limit for embeds. For large responses:
1. Split the response into chunks
2. Use multiple embeds or fields
3. Consider using file attachments for very large outputs

### Long-Running Tasks
For tasks that may take a long time:
1. Send immediate acknowledgment
2. Provide periodic updates if possible
3. Set appropriate timeouts
4. Use the task queue to manage execution

### Rate Limiting
To avoid Discord API rate limits:
1. Implement cooldowns on frequently used commands
2. Use bulk operations when possible (e.g., edit message instead of delete + send)
3. Handle rate limit errors gracefully with exponential backoff

## Testing Tips
- Use a dedicated test Discord server
- Create a separate test bot for development
- Test with different types of inputs and edge cases
- Verify error handling by intentionally causing errors
- Use pytest markers to categorize tests (unit, integration, slow)
- Run tests with coverage to identify untested code paths

## Deployment Notes
- Use Docker for consistent deployment
- Ensure all environment variables are properly set
- Monitor logs for errors and performance issues
- Consider using a process manager for production deployments
- Implement health checks for container orchestration
- Use CI/CD for automated testing and deployment

## Development Workflow
- New features or bug fixes are developed in separate branches
- Branch names use prefixes like "feat/", "fix/", "docs/", "refactor/"
- Commit messages use prefixes like "feat:", "fix:", "docs:", "refactor:"
- Create a pull request and get code reviewed
- Ensure CI/CD checks pass
- Merge after review approval

## Testing Strategy
- Unit tests are created for all major functionalities
- Integration tests are created for interactions between major components
- External dependencies are isolated using mocks
- Test coverage goal is 80%

## Documentation Rules
- README should contain basic setup and usage instructions
- API documentation is auto-generated from Docstrings
- Add detailed comments for complex logic

## Error Handling
- Define appropriate exception classes and use them
- Provide clear and helpful error messages to users
- Set appropriate log level and record debug information

## Security Measures
- Use environment variables to manage sensitive information
- Perform thorough input validation
- Check for dependency package vulnerabilities

## Performance Considerations
- Use asynchronous processing for responsiveness
- Monitor resource usage
- Long-running tasks are processed in the background

## Deployment
- Use Docker containers for consistent deployment
- Use environment variables for different environments
- Use CI/CD pipelines for automated deployment

## Branch Protection Settings
- Direct pushes to the `main` branch are prohibited
- Changes are reflected only through pull requests
- At least one review approval is required
- The following CI/CD checks must pass:
  - lint: code style and quality check
  - test: unit tests and integration tests
  - security: security vulnerability check
  - docker: Docker image build test
- The branch must be kept up-to-date before merging
- Administrators must also follow these rules 

## Version Control
- Use `.gitignore` to exclude common Python-related files and directories:
  - Python bytecode and cache files (`__pycache__/`, `*.py[cod]`)
  - Distribution and packaging files (`build/`, `dist/`, `*.egg-info/`)
  - Test and coverage reports (`.coverage`, `coverage.xml`, `.pytest_cache/`)
  - Environment files (`.env`, `.venv/`, `env/`)
  - IDE-specific files (`.idea/`, `.vscode/`)
  - OS-specific files (`.DS_Store`, `Thumbs.db`)
  - Log files (`*.log`)
- Always run tests before committing changes
- Follow the project's branching strategy and commit message conventions

## Type Checking
- Use mypy for static type checking
- Run `mypy src` before committing changes
- Fix all type errors before merging
- Use proper type annotations for all functions and variables
- Handle Optional types correctly
- Use Union types when a variable can have multiple types
- Add type annotations to class attributes in __init__ methods
- Use proper return type annotations, including -> None for functions that don't return a value 